name: Deploy flows to S3, code dependencies to ECR and agent to AWS ECS

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "prefectdataops"
  ECS_SERVICE: "prefect2/prefectdataops"
  ECS_CLUSTER: "prefect2"
  ECS_TASK_DEFINITION: "task-definition.json"
  CONTAINER_NAME: "prefectdataops"
  PREFECT_WORKSPACE: "annaprefect/production"

jobs:
  changes:
    name: Detect changes and set job outputs based on filters
    runs-on: ubuntu-latest
    outputs:
      flows: ${{ steps.filter.outputs.flows }}
      code_dependencies: ${{ steps.filter.outputs.code_dependencies }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            flows:
              - 'flows/**'
            code_dependencies:
              - 'prefect_dataops/**'
              - 'requirements.txt'

  create_ecr_repo:
    name: Create an ECR repository if not exists
    runs-on: ubuntu-latest
    needs: changes

  flows:
    name: Deploy flows to Prefect backend
    environment: staging
    needs: changes
    if: ${{ needs.changes.outputs.flows == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flows: ${{ fromJSON(needs.changes.outputs.flows) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Python dependencies
        run: |
          pip install s3fs
          pip install -U "prefect>=2.0b"
      - name: Login to Prefect Cloud 2.0
        run: prefect cloud login --key ${{ secrets.PREFECT_API_KEY}} --workspace ${{ env.PREFECT_WORKSPACE }}
      - name: Validate Prefect version
        run: prefect version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create deployment
        run: prefect deployment create ${{ matrix.flows }}

  code_dependencies:
    name: Build and push container image
    environment: staging
    needs: changes
    if: ${{ needs.changes.outputs.code_dependencies == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
